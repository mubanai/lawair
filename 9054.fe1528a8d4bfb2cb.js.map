{"version":3,"file":"9054.fe1528a8d4bfb2cb.js","mappings":"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","names":["User","constructor","_id","username","password","firstName","lastName","createdAt","updatedAt","this","i0","Tab3Page_div_7_div_8_ng_template_2_div_0_Template","message_r3","status","seen_r2","Tab3Page_div_7_div_8_ng_template_4_div_0_Template","Tab3Page_div_7_div_8_div_1_Template","Tab3Page_div_7_div_8_ng_template_2_Template","Tab3Page_div_7_div_8_ng_template_4_Template","sent_r4","Tab3Page_div_7_div_8_Template","userIsSender","senderFullName","message","_r5","ctx_r5","sendMessage","routes","path","component","_Tab3Page","Tab3Page","navCtrl","conversationMessagesService","activatedRoute","loadingController","appService","messages","conversationId","receiverFullName","isCalled","listenToSocketUpdateListMessagesEvent","ngOnInit","_this","_asyncToGenerator","create","spinner","cssClass","showBackdrop","present","dismiss","getConversationMessages","generateSessionId","subscribe","res","session_id","setSessionId","err","console","log","onFocus","messageInput","nativeElement","focus","resObj","dummyUserSender","getUserObj","dummyUserReceiver","user","receiver","receiverId","pushNewMessage","response","sender","receivers","isRead","receiversIds","Date","map","filterMessageAndUpdateStatus","scrollToBottom","_ref","_message$sender$first","_message$sender","_message$sender2","_message$sender3","_message$receivers","id","forEach","_this$editorMsg","_this$appService$getS","editorMsg","trim","getSessionId","db_folder","element","setTimeout","content","push","ngOnDestroy","i1","i2","i3","i4","selectors","viewQuery","rf","ctx","Tab3Page_div_7_Template","$event","_r1","Tab3Page_ion_button_13_Template","Tab3Page_ion_spinner_14_Template","Tab3PageRoutingModule","_Tab3PageRoutingModule","RouterModule","forChild","Tab3PageModule","_Tab3PageModule","IonicModule","CommonModule","FormsModule","ExploreContainerComponentModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/app/models/user.ts","./src/app/tab3/tab3.page.html","./src/app/tab3/tab3-routing.module.ts","./src/app/tab3/tab3.page.ts","./src/app/tab3/tab3.module.ts"],"sourcesContent":["export class User {\n  constructor(\n    public _id?: string,\n    public username?: string,\n    public password?: string,\n    public firstName?: string,\n    public lastName?: string,\n    public createdAt?: string,\n    public updatedAt?: string\n  ) {}\n}\n","<ion-header [translucent]=\"true\">\r\n  <ion-toolbar>\r\n    <ion-title class=\"three-d-title\">\r\n      LawAIr, Your Legal Advisor\r\n    </ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content #content id=\"content\" class=\"ion-padding\">\r\n  <div class=\"message-wrap\">\r\n    <div *ngFor=\"let message of messages\" class=\"message\" [class.right]=\" message.userIsSender === true\">\r\n      <div class=\"msg-detail\">\r\n        <div class=\"msg-info\">\r\n          <p> {{message.senderFullName}}</p>\r\n        </div>\r\n        <div class=\"msg-content\">\r\n          <p>{{message.message}}</p>\r\n        </div>\r\n      </div>\r\n      <div *ngIf=\"message.userIsSender\" class=\"msg-status\">\r\n        <div *ngIf=\"message.status === 'pending';else sent\">\r\n          pending\r\n          <ion-icon name=\"checkmark-circle\"></ion-icon>\r\n        </div>\r\n        <ng-template #sent>\r\n          <div *ngIf=\"message.status === 'sent';else seen\">\r\n            sent\r\n            <ion-icon name=\"checkmark-circle-outline\"></ion-icon>\r\n          </div>\r\n        </ng-template>\r\n        <ng-template #seen>\r\n          <div *ngIf=\"message.status === 'seen'\">\r\n            seen\r\n            <ion-icon name=\"checkmark\"></ion-icon>\r\n          </div>\r\n        </ng-template>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div id=\"bottom\"></div>\r\n</ion-content>\r\n\r\n<ion-footer>\r\n  <ion-item lines=\"none\">\r\n    <ion-textarea #chatInput [(ngModel)]=\"editorMsg\" (focusin)=\"onFocus()\" clearInput=true placeholder=\"Type something here\">\r\n    </ion-textarea>\r\n    <ion-button size=\"large\" (click)='sendMessage()' slot=\"end\" fill=\"outline\" *ngIf=\"isCalled === false\">\r\n        <ion-icon name=\"send-outline\" slot=\"icon-only\"></ion-icon>\r\n    </ion-button>\r\n    <ion-spinner *ngIf=\"isCalled === true\" ></ion-spinner>\r\n  </ion-item>\r\n</ion-footer>\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { Tab3Page } from './tab3.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: Tab3Page,\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class Tab3PageRoutingModule {}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  ViewChild,\r\n  ElementRef,\r\n  OnDestroy,\r\n} from '@angular/core';\r\n\r\nimport { ConversationMessagesService } from '../services/conversation-messages.service';\r\nimport { LoadingController, NavController } from '@ionic/angular';\r\nimport { User } from '../models/user';\r\nimport { Message } from '../models/message';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AppService } from '../services/app.service';\r\n@Component({\r\n  selector: 'app-tab3',\r\n  templateUrl: 'tab3.page.html',\r\n  styleUrls: ['tab3.page.scss'],\r\n  standalone: false,\r\n})\r\n\r\nexport class Tab3Page implements OnInit, OnDestroy {\r\n\r\n  @ViewChild('content', { static: true }) private content: any;\r\n  @ViewChild('chatInput', { static: true }) messageInput: ElementRef | undefined;\r\n  messages: Message[] = [];\r\n  conversationId: string = '';\r\n  receiverFullName: string = '';\r\n  editorMsg: any;\r\n  receiverId: any;\r\n  isCalled: boolean = false;\r\n  constructor(\r\n    private navCtrl: NavController,\r\n    private conversationMessagesService: ConversationMessagesService,\r\n    private activatedRoute: ActivatedRoute,\r\n    public loadingController: LoadingController,\r\n    public appService: AppService\r\n  ) {\r\n    this.listenToSocketUpdateListMessagesEvent();\r\n  }\r\n  async ngOnInit() {\r\n    const loading = await this.loadingController.create({\r\n      spinner: 'bubbles',\r\n      cssClass: 'custom-loader-class',\r\n      showBackdrop: false,\r\n    });\r\n    await loading.present();\r\n    await this.loadingController.dismiss();\r\n    // this.socket.on('connect', () => {\r\n      this.getConversationMessages();\r\n      // this.socket.emit('conversationRoomNumber', this.conversationId);\r\n    // });\r\n    this.conversationMessagesService.generateSessionId().subscribe(\r\n      (res) => {\r\n        if(res.session_id) {\r\n          this.appService.setSessionId(res.session_id);\r\n        }\r\n      },\r\n      (err) => {\r\n        console.log(\"caught error {}\", err)\r\n        this.isCalled=false;\r\n      }\r\n      // err => this.purchaseMessageProvider.storeRequest(message),\r\n    );\r\n  }\r\n\r\n  onFocus() {\r\n    if (this.messageInput && this.messageInput.nativeElement) {\r\n      this.messageInput.nativeElement.focus();\r\n    }\r\n  }\r\n\r\n  getConversationMessages(resObj?: any) {\r\n    const dummyUserSender = this.appService.getUserObj();\r\n    const dummyUserReceiver = new User();\r\n    dummyUserReceiver._id=\"2\";\r\n    dummyUserReceiver.username=\"driod@gmail.com\";\r\n    dummyUserReceiver.firstName=\"LawAir\";\r\n    dummyUserReceiver.lastName=\"\";\r\n    dummyUserReceiver.password=\"driod@gmail.com\";\r\n    const user = dummyUserSender;\r\n    user._id=\"1\"\r\n    const queryParams = this.activatedRoute.snapshot.queryParams;\r\n    const receiver: User = dummyUserReceiver;//JSON.parse(queryParams['receiver']);\r\n    this.receiverFullName = receiver.firstName + ' ' + receiver.lastName;\r\n    console.log('----->');\r\n    this.receiverId = receiver._id;\r\n    if (user) {\r\n      const participants: string[] = [receiver._id??'', user._id??''];\r\n      // this.conversationMessagesService\r\n      //   .getConversationMessages(participants)\r\n      //   .subscribe((res) => {\r\n      if(resObj) {\r\n          if (typeof user === 'string') {\r\n            this.conversationId = user;\r\n          } else {\r\n            const message: Message = {\r\n              message: resObj.response,\r\n              sender: receiver,\r\n              session_id: '710ec67d-4ee1-4179-a97a-02022210fde4',\r\n              receivers: [{receiverId: this.receiverId, isRead: true}],\r\n              receiversIds: [this.receiverId],\r\n              userIsSender: false,\r\n              createdAt: new Date(),\r\n            };\r\n            this.pushNewMessage(message);\r\n            this.messages = this.messages.map((message) => {\r\n              return this.filterMessageAndUpdateStatus(message, user);\r\n            });\r\n            this.scrollToBottom();\r\n          }\r\n        }\r\n        // });\r\n    }\r\n  }\r\n\r\n  filterMessageAndUpdateStatus(message: Message, user: any): Message {\r\n    message.senderFullName =\r\n      message.sender?.firstName??'' + ' ' + message.sender?.lastName??'';\r\n    if (message.sender?._id === user?.id) {\r\n      message.userIsSender = true;\r\n    }\r\n    message.receivers?.forEach((receiver) => {\r\n      if (message.userIsSender) {\r\n        if (receiver.isRead) {\r\n          message.status = 'seen';\r\n        } else {\r\n          message.status = 'sent';\r\n        }\r\n      }\r\n    });\r\n    return message;\r\n  }\r\n\r\n  sendMessage() {\r\n    if (!this.editorMsg?.trim()) {\r\n      return;\r\n    }\r\n    this.isCalled = true;\r\n    const message: Message = {\r\n      message: this.editorMsg,\r\n      session_id: this.appService.getSessionId()??'',\r\n      db_folder: 'health_supplements',\r\n      receiversIds: [this.receiverId],\r\n      userIsSender: true,\r\n      createdAt: new Date(),\r\n    };\r\n    this.editorMsg = '';\r\n    this.onFocus();\r\n    this.pushNewMessage(message);\r\n    this.conversationMessagesService.sendMessage(message).subscribe(\r\n      (res) => {\r\n        this.isCalled=false;\r\n        this.messages.forEach((element) => {\r\n          if (element.message === message.message && element.userIsSender) {\r\n            element.status = 'sent';\r\n          }\r\n        });\r\n        this.getConversationMessages(res);\r\n      },\r\n      (err) => {\r\n        console.log(\"caught error {}\", err)\r\n        this.isCalled=false;\r\n      }\r\n      // err => this.purchaseMessageProvider.storeRequest(message),\r\n    );\r\n  }\r\n\r\n  listenToSocketUpdateListMessagesEvent() {\r\n    // this.socket.on('new-message', () => {\r\n      this.getConversationMessages();\r\n      this.scrollToBottom();\r\n    // });\r\n  }\r\n\r\n  scrollToBottom() {\r\n    setTimeout(() => {\r\n      if (this.content.scrollToBottom) {\r\n        this.content.scrollToBottom();\r\n      }\r\n    }, 200);\r\n  }\r\n  pushNewMessage(message: Message) {\r\n    message.status = 'pending';\r\n    this.messages.push(message);\r\n    this.scrollToBottom();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    console.log(\"Getting destroyed the message component!!!\");\r\n  }\r\n}\r\n\r\n","import { IonicModule } from '@ionic/angular';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Tab3Page } from './tab3.page';\r\nimport { ExploreContainerComponentModule } from '../explore-container/explore-container.module';\r\n\r\nimport { Tab3PageRoutingModule } from './tab3-routing.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    IonicModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    ExploreContainerComponentModule,\r\n    Tab3PageRoutingModule\r\n  ],\r\n  declarations: [Tab3Page]\r\n})\r\nexport class Tab3PageModule {}\r\n"],"x_google_ignoreList":[]}